(define (delay object-to-delay)
  (memo-proc (lambda () object-to-delay)))
(define (force delayed-object)
  (delayed-object))
(define (memo-proc proc)
  (let ((already-run? false)
	(result false))
    (lambda ()
      (if (not already-run?)
	  (begin (set! result (proc))
		 (set! already-run? true)
		 result)
	  result))))

(define (cons-stream a b)
  (cons a (delay b)))
(define (stream-car stream)
  (car stream))
(define (stream-cdr stream)
  (force (cdr stream)))
(define the-empty-stream '())

(define (stream-ref s n)
  (if (= n 0)
      (stream-car s)
      (stream-ref (stream-cdr s)
		  (- n 1))))
(define (stream-map proc s)
  (if (null? s)
      the-empty-stream
      (cons-stream (proc (stream-car s))
		   (stream-map proc (stream-cdr s)))))
(define (stream-filter pred s)
  (cond ((null? s)
	 the-empty-stream)
	((pred (stream-car s))
	 (cons-stream (stream-car s)
		      (stream-filter pred (stream-cdr s))))
	(else
	 (stream-filter pred (stream-cdr s)))))
(define (stream-for-each proc s)
  (if (null? s)
      'done
      (begin (proc (stream-car s))
	     (stream-for-each proc (stream-cdr s)))))
(define (stream-display s)
  (stream-for-each display-line s))
(define (display-line x)
  (newline)
  (display x))

(define (eval exp env)
  (cond ((self-evaluating? exp) exp)
	((variable? exp) (lookup-variable-value exp env))
	((quoted? exp) (text-of-quotation exp))
	((assignment? exp) (eval-assignment exp env))
	((definition? exp) (eval-definition exp env))
	((if? exp) (eval-if exp exv))
	((and? exp) (eval-and exp env));;add and as special form
	((or? exp) (eval-or exp env));;add or as special form
	((lambda? exp)
	 (make-procedure (lambda-parameters exp)
			 (lambda-body exp)
			 env))
	((begin? exp)
	 (eval-sequence (begin-actions exp) env))
	((cond? exp) (eval (cond-if exp) env))
	((application? exp)
	 (apply (eval (operator exp) env)
		(list-of-values (operands exp) env)))
	(else
	 (error "Unknown expression type -- EVAL" exp))))

(define (and? exp) (tagged-list? exp 'and))
(define (eval-and exp env)
  (let ((and-exps (cdr exp)))
    (define (and-iter exps env)
      (let ((result (eval (first-exp exps) env)))
	(cond ((null? exps) 'true)
	      ((not (true? result)) 'false)
	      ((last-exp? exps) result)
	      (else (and-iter (rest-exps exps) env)))))
    (and-iter and-exps env))) 

(define (or? exp) (tagged-list? exp 'or))
(define (eval-or exp env)
  (let ((or-exps (cdr exp)))
    (define (or-iter exps env)
  	(cond ((null? exps) 'false)
	      ((true? (eval (first-exp exps) env)) 'true)
	      (else (or-iter (rest-exps exps) env))))
    (or-iter or-exps env)))



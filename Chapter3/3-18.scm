(define (contain-circle? x)
  (define (visited? visited-list x)
    (cond ((null? visited-list) #f)
	  ((eq? x (car visited-list)) #t)
	  (else (visited? (cdr visited-list) x))))
  (let ((visited-list '()))
    (define (traverse x)
      (cond ((not (pair? x)) #f)
	    ((visited? visited-list x) #t)
	    (else
	     (set! visited-list (cons x visited-list))
	     (or (traverse (car x))
		 (traverse (cdr x))))))
    (traverse x)))

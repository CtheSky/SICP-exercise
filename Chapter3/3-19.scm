(define (contain-circle-o1-space? lst)
  (define (list-walk step lst)
    (cond ((null? lst) '())
	  ((= step 0) lst)
	  (else (list-walk (- step 1)
			   (cdr lst)))))
  (define (iter x y)
    (let ((1-step (list-walk 1 x))
	  (2-step (list-walk 2 y)))
      (cond ((null? 2-step) #f)
	    ((eq? 1-step 2-step) #t)
	    (else (iter 1-step 2-step)))))
  (iter lst lst))

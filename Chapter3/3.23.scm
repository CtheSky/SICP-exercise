(define (make-deque)
  (cons '() '()))
(define (front-ptr deque)
  (car deque))
(define (rear-ptr deque)
  (cdr deque))
(define (set-front-ptr! deque item)
  (set-car! deque item))
(define (set-rear-ptr! deque item)
  (set-cdr! deque item))
(define (empty-deque? deque)
  (null? (front-ptr deque)))
(define (front-deque deque)
  (if (empty-deque? deque)
      (error "FRONT-DEQUE called on an empty deque" deque)
      (car (car (front-ptr deque)))))
(define (rear-deque deque)
  (if (empty-deque? deque)
      (error "FRONT-DEQUE called on an empty deque" deque)
      (car (car (rear-ptr deque)))))
(define (front-insert-deque! deque item)
  (let ((new-pair (cons (cons item '()) '())))
    (cond ((empty-deque? deque)
	   (set-front-ptr! deque new-pair)
	   (set-rear-ptr! deque new-pair)
	   deque)
	  (else
	   (set-cdr! new-pair (front-ptr deque))
	   (set-cdr! (car (front-ptr deque)) new-pair)
	   (set-front-ptr! deque new-pair)
	   deque))))
(define (rear-insert-deque! deque item)
  (let ((new-pair (cons (cons item '()) '())))
    (cond ((empty-deque? deque)
	   (set-front-ptr! deque new-pair)
	   (set-rear-ptr! deque  new-pair)
	   deque)
	  (else
	   (set-cdr! (car new-pair) (rear-ptr deque))
	   (set-cdr! (rear-ptr deque) new-pair)
	   (set-rear-ptr! deque new-pair)
	   deque))))
(define (front-delete-deque! deque)
  (cond ((empty-deque? deque)
	 (error "FRONT-DELETE called on an empty deque" deque))
	((eq? (front-deque deque)
	      (rear-deque deque))
	 (set-front-ptr! deque '())
	 (set-rear-ptr! deque '())
	 deque)
	(else
	 (set-front-deque! deque (cdr (front-ptr deque)))
	 (set-cdr! (car (front-ptr deque)) '())
	 deque)))
(define (rear-delete-deque! deque)
  (cond ((empty-deque? deque)
	 (error "REAR-DELETE called on an empty deque" deque))
	((eq? (front-deque deque)
	      (rear-deque deque))
	 (set-front-ptr! deque '())
	 (set-rear-ptr! deque '())
	 deque)
	(else
	 (set-rear-ptr! deque (cdr (car (rear-ptr deque))))
	 (set-cdr! (rear-ptr deque) '())
	 deque)))

(define (count-pairs x)
  (define (visited? visited-list x)
    (cond ((null? visited-list) #f)
          ((eq? x (car visited-list)) #t)
          (else (visited? (cdr visited-list) x))))
  (let ((visited-list '()))
    (define (count-iter x)
      (cond ((not (pair? x)) 0)
	    ((visited? visited-list x) 0)
	    (else 
	     (set! visited-list (cons x visited-list))
	     (+ (count-iter (car x))
		(count-iter (cdr x))
		1))))
    (count-iter x)))

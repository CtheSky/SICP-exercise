(load "3.3.4.scm")

(define (ripple-carry-adder a-list b-list s-list c)
  (define (iter a-list b-list s-list)
    (let ((a (car a-list))
	  (b (car b-list))
	  (s (car s-list))
	  (c-out (make-wire)))
      (if (null? (cdr a-list))
	  (begin (half-adder a b s c-out)
		 c-out)
	  (let ((c-in (iter (cdr a-list)
			    (cdr b-list)
			    (cdr s-list))))
	    (full-adder a b c-in s c-out)
	    c-out))))
  (define (joint-wire input output)
    (add-action! input 
		 (lambda ()
		   (after-delay 0
				(set-signal! output 
					     (get-signal input)))))
    'ok)
  (let ((a-len (length a-list))
	(b-len (length b-list))
	(s-len (length s-list)))
    (if (or (not (= a-len b-len))
	    (not (= b-len s-len)))
	(error "Invalid Input list size" a-len b-len s-len)
	(joint-wire (iter a-list b-list s-list)
		    c))))

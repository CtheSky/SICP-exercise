(define (make-table same-key?)
  (define (assoc key records)
    (cond ((null? records) #f)
	  ((same-key? key (caar records)) (car records))
	  (else (assoc key (cdr records)))))

  (let ((local-table (list '*table*)))
    (define (lookup key-list)
      (define (lookup-iter key-list table)
	(let ((subtable (assoc (car key-list) (cdr table))))
	  (cond ((not subtable) #f)
		((null? (cdr key-list)) (cdr subtable))
		(else (lookup-iter (cdr key-list) subtable)))))
      (lookup-iter key-list local-table))
    (define (insert! key-list value)
      (define (create-table key-list)
	  (let ((cur-key (car key-list))
		(rest-keys (cdr key-list)))
	    (if (null? rest-keys)
		(cons cur-key value)
		(list cur-key 
		      (create-table rest-keys)))))
      (define (insert-iter key-list table)
	(let ((subtable (assoc (car key-list) (cdr table))))
	  (cond ((not subtable)
		 (set-cdr! table 
			   (cons (create-table key-list)
				 (cdr table))))
		((null? (cdr key-list))
		 (set-cdr! subtable value))
		(else
		 (insert-iter (cdr key-list) subtable)))))
      (insert-iter key-list local-table)
      'done)
    (define (dispatch m)
      (cond ((eq? m 'lookup) lookup)
	    ((eq? m 'insert!) insert!)
	    (else (error "UNKOWN operation -- TABLE" m))))
    dispatch))
